"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4140) (cond ((and (cons? V4140) (and (= defcc (hd V4140)) (cons? (tl V4140)))) (shen.yacc->shen (hd (tl V4140)) (tl (tl V4140)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4143 V4144) (let CCRules (shen.split_cc_rules true V4144 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4143 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4146) (cond ((> (occurrences kill V4146) 0) (cons trap-error (cons V4146 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4146)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4148) (let String (error-to-string V4148) (if (= String "yacc kill") (fail) V4148)))

(defun shen.split_cc_rules (V4154 V4155 V4156) (cond ((and (= () V4155) (= () V4156)) ()) ((= () V4155) (cons (shen.split_cc_rule V4154 (reverse V4156) ()) ())) ((and (cons? V4155) (= ; (hd V4155))) (cons (shen.split_cc_rule V4154 (reverse V4156) ()) (shen.split_cc_rules V4154 (tl V4155) ()))) ((cons? V4155) (shen.split_cc_rules V4154 (tl V4155) (cons (hd V4155) V4156))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4164 V4165 V4166) (cond ((and (cons? V4165) (and (= := (hd V4165)) (and (cons? (tl V4165)) (= () (tl (tl V4165)))))) (cons (reverse V4166) (tl V4165))) ((and (cons? V4165) (and (= := (hd V4165)) (and (cons? (tl V4165)) (and (cons? (tl (tl V4165))) (and (= where (hd (tl (tl V4165)))) (and (cons? (tl (tl (tl V4165)))) (= () (tl (tl (tl (tl V4165))))))))))) (cons (reverse V4166) (cons (cons where (cons (hd (tl (tl (tl V4165)))) (cons (hd (tl V4165)) ()))) ()))) ((= () V4165) (do (shen.semantic-completion-warning V4164 V4166) (shen.split_cc_rule V4164 (cons := (cons (shen.default_semantics (reverse V4166)) ())) V4166))) ((cons? V4165) (shen.split_cc_rule V4164 (tl V4165) (cons (hd V4165) V4166))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4177 V4178) (cond ((= true V4177) (do (shen.prhush "warning: " (stoutput)) (do (for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4178)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4180) (cond ((= () V4180) ()) ((and (cons? V4180) (and (= () (tl V4180)) (shen.grammar_symbol? (hd V4180)))) (hd V4180)) ((and (cons? V4180) (shen.grammar_symbol? (hd V4180))) (cons append (cons (hd V4180) (cons (shen.default_semantics (tl V4180)) ())))) ((cons? V4180) (cons cons (cons (hd V4180) (cons (shen.default_semantics (tl V4180)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4182) (and (symbol? V4182) (let Cs (shen.strip-pathname (explode V4182)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4184) (cond ((and (cons? V4184) (= () (tl V4184))) (hd V4184)) ((cons? V4184) (let P YaccParse (cons let (cons P (cons (hd V4184) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4184)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4186) (cond ((and (cons? V4186) (and (cons? (tl V4186)) (= () (tl (tl V4186))))) (shen.syntax (hd V4186) Stream (hd (tl V4186)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4190 V4191 V4192) (cond ((and (= () V4190) (and (cons? V4192) (and (= where (hd V4192)) (and (cons? (tl V4192)) (and (cons? (tl (tl V4192))) (= () (tl (tl (tl V4192))))))))) (cons if (cons (shen.semantics (hd (tl V4192))) (cons (cons shen.pair (cons (cons hd (cons V4191 ())) (cons (shen.semantics (hd (tl (tl V4192)))) ()))) (cons (cons fail ()) ()))))) ((= () V4190) (cons shen.pair (cons (cons hd (cons V4191 ())) (cons (shen.semantics V4192) ())))) ((cons? V4190) (if (shen.grammar_symbol? (hd V4190)) (shen.recursive_descent V4190 V4191 V4192) (if (variable? (hd V4190)) (shen.variable-match V4190 V4191 V4192) (if (shen.jump_stream? (hd V4190)) (shen.jump_stream V4190 V4191 V4192) (if (shen.terminal? (hd V4190)) (shen.check_stream V4190 V4191 V4192) (if (cons? (hd V4190)) (shen.list-stream (shen.decons (hd V4190)) (tl V4190) V4191 V4192) (simple-error (shen.app (hd V4190) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4197 V4198 V4199 V4200) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4199 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V4199 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4198 (cons shen.pair (cons (cons tl (cons (cons hd (cons V4199 ())) ())) (cons (cons hd (cons (cons tl (cons V4199 ())) ())) ()))) V4200) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4197 (cons shen.pair (cons (cons hd (cons (cons hd (cons V4199 ())) ())) (cons (cons hd (cons (cons tl (cons V4199 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4202) (cond ((and (cons? V4202) (and (= cons (hd V4202)) (and (cons? (tl V4202)) (and (cons? (tl (tl V4202))) (and (= () (hd (tl (tl V4202)))) (= () (tl (tl (tl V4202))))))))) (cons (hd (tl V4202)) ())) ((and (cons? V4202) (and (= cons (hd V4202)) (and (cons? (tl V4202)) (and (cons? (tl (tl V4202))) (= () (tl (tl (tl V4202)))))))) (cons (hd (tl V4202)) (shen.decons (hd (tl (tl V4202)))))) (true V4202)))

(defun shen.insert-runon (V4217 V4218 V4219) (cond ((and (cons? V4219) (and (= shen.pair (hd V4219)) (and (cons? (tl V4219)) (and (cons? (tl (tl V4219))) (and (= () (tl (tl (tl V4219)))) (= (hd (tl (tl V4219))) V4218)))))) V4217) ((cons? V4219) (map (lambda Z (shen.insert-runon V4217 V4218 Z)) V4219)) (true V4219)))

(defun shen.strip-pathname (V4225) (cond ((not (element? "." V4225)) V4225) ((cons? V4225) (shen.strip-pathname (tl V4225))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4229 V4230 V4231) (cond ((cons? V4229) (let Test (cons (hd V4229) (cons V4230 ())) (let Action (shen.syntax (tl V4229) (concat Parse_ (hd V4229)) V4231) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4229)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4229)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4235 V4236 V4237) (cond ((cons? V4235) (let Test (cons cons? (cons (cons hd (cons V4236 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4235)) (cons (cons hd (cons (cons hd (cons V4236 ())) ())) (cons (shen.syntax (tl V4235) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4236 ())) ())) (cons (cons shen.hdtl (cons V4236 ())) ()))) V4237) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4247) (cond ((cons? V4247) false) ((variable? V4247) false) (true true)))

(defun shen.jump_stream? (V4253) (cond ((= V4253 _) true) (true false)))

(defun shen.check_stream (V4257 V4258 V4259) (cond ((cons? V4257) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4258 ())) ())) (cons (cons = (cons (hd V4257) (cons (cons hd (cons (cons hd (cons V4258 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V4257) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4258 ())) ())) (cons (cons shen.hdtl (cons V4258 ())) ()))) V4259) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4263 V4264 V4265) (cond ((cons? V4263) (let Test (cons cons? (cons (cons hd (cons V4264 ())) ())) (let Action (shen.syntax (tl V4263) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4264 ())) ())) (cons (cons shen.hdtl (cons V4264 ())) ()))) V4265) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4267) (cond ((= () V4267) ()) ((shen.grammar_symbol? V4267) (cons shen.hdtl (cons (concat Parse_ V4267) ()))) ((variable? V4267) (concat Parse_ V4267)) ((cons? V4267) (map (lambda Z (shen.semantics Z)) V4267)) (true V4267)))

(defun shen.snd-or-fail (V4275) (cond ((and (cons? V4275) (and (cons? (tl V4275)) (= () (tl (tl V4275))))) (hd (tl V4275))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V4278 V4279) (cons V4278 (cons V4279 ())))

(defun shen.hdtl (V4281) (hd (tl V4281)))

(defun <!> (V4289) (cond ((and (cons? V4289) (and (cons? (tl V4289)) (= () (tl (tl V4289))))) (cons () (cons (hd V4289) ()))) (true (fail))))

(defun <e> (V4295) (cond ((and (cons? V4295) (and (cons? (tl V4295)) (= () (tl (tl V4295))))) (cons (hd V4295) (cons () ()))) (true (shen.f_error <e>))))



