"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2440) (cond ((and (cons? V2440) (and (cons? (tl V2440)) (= () (tl (tl V2440))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2440)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2442) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2442) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2442) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2444) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2444) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2444) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2446) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2446) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2446) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2448) (let YaccParse (if (and (cons? (hd V2448)) (= if (hd (hd V2448)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2448)) (shen.hdtl V2448))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2448)) (= let (hd (hd V2448)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2448)) (shen.hdtl V2448))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2450) (if (cons? (hd V2450)) (let Parse_X (hd (hd V2450)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2450)) (shen.hdtl V2450))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2452) (if (cons? (hd V2452)) (let Parse_X (hd (hd V2452)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2452)) (shen.hdtl V2452))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2454) (cond ((and (cons? V2454) (and (cons? (tl V2454)) (and (cons? (tl (tl V2454))) (and (= () (tl (tl (tl V2454)))) (= (hd (tl V2454)) bar!))))) (cons (hd V2454) (hd (tl (tl V2454))))) ((cons? V2454) (cons (shen.remove-bar (hd V2454)) (shen.remove-bar (tl V2454)))) (true V2454)))

(defun shen.<premises> (V2456) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2456) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2456) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2458) (if (cons? (hd V2458)) (let Parse_X (hd (hd V2458)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2458)) (shen.hdtl V2458))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2460) (let YaccParse (if (and (cons? (hd V2460)) (= ! (hd (hd V2460)))) (shen.pair (hd (shen.pair (tl (hd V2460)) (shen.hdtl V2460))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2460) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2460) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2462) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2462) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2462) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2465 V2466) (@p V2465 V2466))

(defun shen.<formulae> (V2468) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2468) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2468) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2468) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2470) (if (cons? (hd V2470)) (let Parse_X (hd (hd V2470)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2470)) (shen.hdtl V2470))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2472) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2472) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2472) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2474) (let Parse_shen.<expr> (shen.<expr> V2474) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2476) (if (cons? (hd V2476)) (let Parse_X (hd (hd V2476)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2476)) (shen.hdtl V2476))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2478) (if (cons? (hd V2478)) (let Parse_X (hd (hd V2478)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2478)) (shen.hdtl V2478))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2480) (and (symbol? V2480) (shen.sh? (str V2480))))

(defun shen.sh? (V2482) (cond ((= "_" V2482) true) (true (and (= (pos V2482 0) "_") (shen.sh? (tlstr V2482))))))

(defun shen.doubleunderline? (V2484) (and (symbol? V2484) (shen.dh? (str V2484))))

(defun shen.dh? (V2486) (cond ((= "=" V2486) true) (true (and (= (pos V2486 0) "=") (shen.dh? (tlstr V2486))))))

(defun shen.process-datatype (V2489 V2490) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2489 V2490))))

(defun shen.remember-datatype (V2496) (cond ((cons? V2496) (do (set shen.*datatypes* (adjoin (hd V2496) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2496) (value shen.*alldatatypes*))) (hd V2496)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2501 V2502) (cond ((= () V2502) ()) ((and (cons? V2502) (and (tuple? (hd V2502)) (= shen.single (fst (hd V2502))))) (cons (shen.rule->horn-clause V2501 (snd (hd V2502))) (shen.rules->horn-clauses V2501 (tl V2502)))) ((and (cons? V2502) (and (tuple? (hd V2502)) (= shen.double (fst (hd V2502))))) (shen.rules->horn-clauses V2501 (append (shen.double->singles (snd (hd V2502))) (tl V2502)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2504) (cons (shen.right-rule V2504) (cons (shen.left-rule V2504) ())))

(defun shen.right-rule (V2506) (@p shen.single V2506))

(defun shen.left-rule (V2508) (cond ((and (cons? V2508) (and (cons? (tl V2508)) (and (cons? (tl (tl V2508))) (and (tuple? (hd (tl (tl V2508)))) (and (= () (fst (hd (tl (tl V2508))))) (= () (tl (tl (tl V2508))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2508)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2508))) Q) ()) (@p shen.single (cons (hd V2508) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2514) (cond ((and (tuple? V2514) (= () (fst V2514))) (snd V2514)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2517 V2518) (cond ((and (cons? V2518) (and (cons? (tl V2518)) (and (cons? (tl (tl V2518))) (and (tuple? (hd (tl (tl V2518)))) (= () (tl (tl (tl V2518)))))))) (cons (shen.rule->horn-clause-head V2517 (snd (hd (tl (tl V2518))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2518) (hd (tl V2518)) (fst (hd (tl (tl V2518))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2521 V2522) (cons V2521 (cons (shen.mode-ify V2522) (cons Context_1957 ()))))

(defun shen.mode-ify (V2524) (cond ((and (cons? V2524) (and (cons? (tl V2524)) (and (= : (hd (tl V2524))) (and (cons? (tl (tl V2524))) (= () (tl (tl (tl V2524)))))))) (cons mode (cons (cons (hd V2524) (cons : (cons (cons mode (cons (hd (tl (tl V2524))) (cons + ()))) ()))) (cons - ())))) (true V2524)))

(defun shen.rule->horn-clause-body (V2528 V2529 V2530) (let Variables (map (lambda X (shen.extract_vars X)) V2530) (let Predicates (map (lambda X (gensym shen.cl)) V2530) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2530 Variables) (let SideLiterals (shen.construct-side-literals V2528) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2530))) V2529) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2539 V2540 V2541 V2542) (cond ((and (= () V2539) (= () V2540)) ()) (true (shen.csl-help V2539 V2540 V2541 V2542))))

(defun shen.csl-help (V2549 V2550 V2551 V2552) (cond ((and (= () V2549) (= () V2550)) (cons (cons bind (cons ContextOut_1957 (cons V2551 ()))) ())) ((and (cons? V2549) (cons? V2550)) (cons (cons (hd V2549) (cons V2551 (cons V2552 (hd V2550)))) (shen.csl-help (tl V2549) (tl V2550) V2552 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2556 V2557 V2558) (cond ((and (= () V2556) (and (= () V2557) (= () V2558))) shen.skip) ((and (cons? V2556) (and (cons? V2557) (cons? V2558))) (do (shen.construct-search-clause (hd V2556) (hd V2557) (hd V2558)) (shen.construct-search-clauses (tl V2556) (tl V2557) (tl V2558)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2562 V2563 V2564) (shen.s-prolog (cons (shen.construct-base-search-clause V2562 V2563 V2564) (cons (shen.construct-recursive-search-clause V2562 V2563 V2564) ()))))

(defun shen.construct-base-search-clause (V2568 V2569 V2570) (cons (cons V2568 (cons (cons (shen.mode-ify V2569) In_1957) (cons In_1957 V2570))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2574 V2575 V2576) (cons (cons V2574 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2576))) (cons :- (cons (cons (cons V2574 (cons Assumptions_1957 (cons Out_1957 V2576))) ()) ()))))

(defun shen.construct-side-literals (V2582) (cond ((= () V2582) ()) ((and (cons? V2582) (and (cons? (hd V2582)) (and (= if (hd (hd V2582))) (and (cons? (tl (hd V2582))) (= () (tl (tl (hd V2582)))))))) (cons (cons when (tl (hd V2582))) (shen.construct-side-literals (tl V2582)))) ((and (cons? V2582) (and (cons? (hd V2582)) (and (= let (hd (hd V2582))) (and (cons? (tl (hd V2582))) (and (cons? (tl (tl (hd V2582)))) (= () (tl (tl (tl (hd V2582)))))))))) (cons (cons is (tl (hd V2582))) (shen.construct-side-literals (tl V2582)))) ((cons? V2582) (shen.construct-side-literals (tl V2582))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2589 V2590) (cond ((tuple? V2589) (cons shen.t* (cons (shen.recursive_cons_form (snd V2589)) (cons (shen.construct-context V2590 (fst V2589)) ())))) ((= ! V2589) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2593 V2594) (cond ((and (= true V2593) (= () V2594)) Context_1957) ((and (= false V2593) (= () V2594)) ContextOut_1957) ((cons? V2594) (cons cons (cons (shen.recursive_cons_form (hd V2594)) (cons (shen.construct-context V2593 (tl V2594)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2596) (cond ((cons? V2596) (cons cons (cons (shen.recursive_cons_form (hd V2596)) (cons (shen.recursive_cons_form (tl V2596)) ())))) (true V2596)))

(defun preclude (V2598) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2598)))

(defun shen.preclude-h (V2600) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2600)) (value shen.*datatypes*)))

(defun include (V2602) (shen.include-h (map (lambda X (shen.intern-type X)) V2602)))

(defun shen.include-h (V2604) (let ValidTypes (intersection V2604 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2606) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2606))))

(defun include-all-but (V2608) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2608))))

(defun shen.synonyms-help (V2614) (cond ((= () V2614) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2614) (cons? (tl V2614))) (let Vs (difference (shen.extract_vars (hd (tl V2614))) (shen.extract_vars (hd V2614))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2614) (cons (hd (tl V2614)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2614)))) (shen.free_variable_warnings (hd (tl V2614)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2617 V2618) (if (element? V2617 (value V2618)) (value V2618) (set V2618 (cons V2617 (value V2618)))))

(defun shen.demod-rule (V2620) (cond ((and (cons? V2620) (and (cons? (tl V2620)) (= () (tl (tl V2620))))) (cons (shen.rcons_form (hd V2620)) (cons -> (cons (shen.rcons_form (hd (tl V2620))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V2626) (cond ((and (cons? V2626) (and (= defun (hd V2626)) (and (cons? (tl V2626)) (and (cons? (tl (tl V2626))) (and (cons? (hd (tl (tl V2626)))) (and (= () (tl (hd (tl (tl V2626))))) (and (cons? (tl (tl (tl V2626)))) (= () (tl (tl (tl (tl V2626)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V2626)))) (tl (tl (tl V2626))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V2629 V2630) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V2630 (shen.default-rule))))))) (do (if V2629 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



