"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun read-char-code (V2163) (read-byte V2163))

(defun read-file-as-bytelist (V2165) (shen.read-file-as-Xlist V2165 (lambda S (read-byte S))))

(defun read-file-as-charlist (V2167) (shen.read-file-as-Xlist V2167 (lambda S (read-char-code S))))

(defun shen.read-file-as-Xlist (V2170 V2171) (let Stream (open V2170 in) (let X (V2171 Stream) (let Xs (shen.read-file-as-Xlist-help Stream V2171 X ()) (let Close (close Stream) (reverse Xs))))))

(defun shen.read-file-as-Xlist-help (V2176 V2177 V2178 V2179) (cond ((= -1 V2178) V2179) (true (shen.read-file-as-Xlist-help V2176 V2177 (V2177 V2176) (cons V2178 V2179)))))

(defun read-file-as-string (V2181) (let Stream (open V2181 in) (shen.rfas-h Stream (read-char-code Stream) "")))

(defun shen.rfas-h (V2185 V2186 V2187) (cond ((= -1 V2186) (do (close V2185) V2187)) (true (shen.rfas-h V2185 (read-char-code V2185) (cn V2187 (n->string V2186))))))

(defun input (V2189) (eval-kl (read V2189)))

(defun input+ (V2192 V2193) (let Mono? (shen.monotype V2192) (let Input (read V2193) (if (= false (shen.typecheck Input (shen.demodulate V2192))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V2192 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V2195) (cond ((cons? V2195) (map (lambda Z (shen.monotype Z)) V2195)) (true (if (variable? V2195) (simple-error (cn "input+ expects a monotype: not " (shen.app V2195 "
" shen.a))) V2195))))

(defun read (V2197) (hd (shen.read-loop V2197 (read-char-code V2197) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V2205 V2206 V2207) (cond ((= 94 V2206) (simple-error "read aborted")) ((= -1 V2206) (if (empty? V2207) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V2207 (lambda E E)))) ((shen.terminator? V2206) (let AllChars (append V2207 (cons V2206 ())) (let It (shen.record-it AllChars) (let Read (compile (lambda X (shen.<st_input> X)) AllChars (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V2205 (read-char-code V2205) AllChars) Read))))) (true (shen.read-loop V2205 (read-char-code V2205) (append V2207 (cons V2206 ()))))))

(defun shen.terminator? (V2209) (element? V2209 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V2211) (shen.lineread-loop (read-char-code V2211) () V2211))

(defun shen.lineread-loop (V2216 V2217 V2218) (cond ((= -1 V2216) (if (empty? V2217) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V2217 (lambda E E)))) ((= V2216 (shen.hat)) (simple-error "line read aborted")) ((element? V2216 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V2217 (lambda E shen.nextline)) (let It (shen.record-it V2217) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-char-code V2218) (append V2217 (cons V2216 ())) V2218) Line)))) (true (shen.lineread-loop (read-char-code V2218) (append V2217 (cons V2216 ())) V2218))))

(defun shen.record-it (V2220) (let TrimLeft (shen.trim-whitespace V2220) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V2222) (cond ((and (cons? V2222) (element? (hd V2222) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V2222))) (true V2222)))

(defun shen.record-it-h (V2224) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V2224))) V2224))

(defun shen.cn-all (V2226) (cond ((= () V2226) "") ((cons? V2226) (cn (hd V2226) (shen.cn-all (tl V2226)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V2228) (let Charlist (read-file-as-charlist V2228) (compile (lambda X (shen.<st_input> X)) Charlist (lambda X (shen.read-error X)))))

(defun read-from-string (V2230) (let Ns (map (lambda X (string->n X)) (explode V2230)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V2238) (cond ((and (cons? V2238) (and (cons? (hd V2238)) (and (cons? (tl V2238)) (= () (tl (tl V2238)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V2238)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V2245 V2246) (cond ((= () V2246) "") ((= 0 V2245) "") ((cons? V2246) (cn (n->string (hd V2246)) (shen.compress-50 (- V2245 1) (tl V2246)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V2248) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V2248) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V2248) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V2248) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V2248) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V2248) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V2248) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2248) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2248) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2248) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V2248) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2248) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V2248) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V2248) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2248) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V2250) (if (and (cons? (hd V2250)) (= 91 (hd (hd V2250)))) (shen.pair (hd (shen.pair (tl (hd V2250)) (shen.hdtl V2250))) shen.skip) (fail)))

(defun shen.<rsb> (V2252) (if (and (cons? (hd V2252)) (= 93 (hd (hd V2252)))) (shen.pair (hd (shen.pair (tl (hd V2252)) (shen.hdtl V2252))) shen.skip) (fail)))

(defun shen.<lcurly> (V2254) (if (and (cons? (hd V2254)) (= 123 (hd (hd V2254)))) (shen.pair (hd (shen.pair (tl (hd V2254)) (shen.hdtl V2254))) shen.skip) (fail)))

(defun shen.<rcurly> (V2256) (if (and (cons? (hd V2256)) (= 125 (hd (hd V2256)))) (shen.pair (hd (shen.pair (tl (hd V2256)) (shen.hdtl V2256))) shen.skip) (fail)))

(defun shen.<bar> (V2258) (if (and (cons? (hd V2258)) (= 124 (hd (hd V2258)))) (shen.pair (hd (shen.pair (tl (hd V2258)) (shen.hdtl V2258))) shen.skip) (fail)))

(defun shen.<semicolon> (V2260) (if (and (cons? (hd V2260)) (= 59 (hd (hd V2260)))) (shen.pair (hd (shen.pair (tl (hd V2260)) (shen.hdtl V2260))) shen.skip) (fail)))

(defun shen.<colon> (V2262) (if (and (cons? (hd V2262)) (= 58 (hd (hd V2262)))) (shen.pair (hd (shen.pair (tl (hd V2262)) (shen.hdtl V2262))) shen.skip) (fail)))

(defun shen.<comma> (V2264) (if (and (cons? (hd V2264)) (= 44 (hd (hd V2264)))) (shen.pair (hd (shen.pair (tl (hd V2264)) (shen.hdtl V2264))) shen.skip) (fail)))

(defun shen.<equal> (V2266) (if (and (cons? (hd V2266)) (= 61 (hd (hd V2266)))) (shen.pair (hd (shen.pair (tl (hd V2266)) (shen.hdtl V2266))) shen.skip) (fail)))

(defun shen.<minus> (V2268) (if (and (cons? (hd V2268)) (= 45 (hd (hd V2268)))) (shen.pair (hd (shen.pair (tl (hd V2268)) (shen.hdtl V2268))) shen.skip) (fail)))

(defun shen.<lrb> (V2270) (if (and (cons? (hd V2270)) (= 40 (hd (hd V2270)))) (shen.pair (hd (shen.pair (tl (hd V2270)) (shen.hdtl V2270))) shen.skip) (fail)))

(defun shen.<rrb> (V2272) (if (and (cons? (hd V2272)) (= 41 (hd (hd V2272)))) (shen.pair (hd (shen.pair (tl (hd V2272)) (shen.hdtl V2272))) shen.skip) (fail)))

(defun shen.<atom> (V2274) (let YaccParse (let Parse_shen.<str> (shen.<str> V2274) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V2274) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V2274) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V2276) (cond ((= () V2276) "") ((and (cons? V2276) (and (= "c" (hd V2276)) (and (cons? (tl V2276)) (= "#" (hd (tl V2276)))))) (let CodePoint (shen.code-point (tl (tl V2276))) (let AfterCodePoint (shen.after-codepoint (tl (tl V2276))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V2276) (@s (hd V2276) (shen.control-chars (tl V2276)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V2280) (cond ((and (cons? V2280) (= ";" (hd V2280))) "") ((and (cons? V2280) (element? (hd V2280) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V2280) (shen.code-point (tl V2280)))) (true (simple-error (cn "code point parse error " (shen.app V2280 "
" shen.a))))))

(defun shen.after-codepoint (V2286) (cond ((= () V2286) ()) ((and (cons? V2286) (= ";" (hd V2286))) (tl V2286)) ((cons? V2286) (shen.after-codepoint (tl V2286))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V2288) (shen.pre (reverse (shen.digits->integers V2288)) 0))

(defun shen.digits->integers (V2294) (cond ((and (cons? V2294) (= "0" (hd V2294))) (cons 0 (shen.digits->integers (tl V2294)))) ((and (cons? V2294) (= "1" (hd V2294))) (cons 1 (shen.digits->integers (tl V2294)))) ((and (cons? V2294) (= "2" (hd V2294))) (cons 2 (shen.digits->integers (tl V2294)))) ((and (cons? V2294) (= "3" (hd V2294))) (cons 3 (shen.digits->integers (tl V2294)))) ((and (cons? V2294) (= "4" (hd V2294))) (cons 4 (shen.digits->integers (tl V2294)))) ((and (cons? V2294) (= "5" (hd V2294))) (cons 5 (shen.digits->integers (tl V2294)))) ((and (cons? V2294) (= "6" (hd V2294))) (cons 6 (shen.digits->integers (tl V2294)))) ((and (cons? V2294) (= "7" (hd V2294))) (cons 7 (shen.digits->integers (tl V2294)))) ((and (cons? V2294) (= "8" (hd V2294))) (cons 8 (shen.digits->integers (tl V2294)))) ((and (cons? V2294) (= "9" (hd V2294))) (cons 9 (shen.digits->integers (tl V2294)))) (true ())))

(defun shen.<sym> (V2296) (let Parse_shen.<alpha> (shen.<alpha> V2296) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V2298) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V2298) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2298) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V2300) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V2300) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V2300) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V2302) (if (cons? (hd V2302)) (let Parse_Char (hd (hd V2302)) (if (shen.numbyte? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V2302)) (shen.hdtl V2302))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.numbyte? (V2308) (cond ((= 48 V2308) true) ((= 49 V2308) true) ((= 50 V2308) true) ((= 51 V2308) true) ((= 52 V2308) true) ((= 53 V2308) true) ((= 54 V2308) true) ((= 55 V2308) true) ((= 56 V2308) true) ((= 57 V2308) true) (true false)))

(defun shen.<alpha> (V2310) (if (cons? (hd V2310)) (let Parse_Char (hd (hd V2310)) (if (shen.symbol-code? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V2310)) (shen.hdtl V2310))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.symbol-code? (V2312) (or (= V2312 126) (or (and (> V2312 94) (< V2312 123)) (or (and (> V2312 59) (< V2312 91)) (or (and (> V2312 41) (and (< V2312 58) (not (= V2312 44)))) (or (and (> V2312 34) (< V2312 40)) (= V2312 33)))))))

(defun shen.<str> (V2314) (let Parse_shen.<dbq> (shen.<dbq> V2314) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V2316) (if (cons? (hd V2316)) (let Parse_Char (hd (hd V2316)) (if (= Parse_Char 34) (shen.pair (hd (shen.pair (tl (hd V2316)) (shen.hdtl V2316))) Parse_Char) (fail))) (fail)))

(defun shen.<strcontents> (V2318) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V2318) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2318) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V2320) (if (cons? (hd V2320)) (let Parse_Char (hd (hd V2320)) (shen.pair (hd (shen.pair (tl (hd V2320)) (shen.hdtl V2320))) (n->string Parse_Char))) (fail)))

(defun shen.<strc> (V2322) (if (cons? (hd V2322)) (let Parse_Char (hd (hd V2322)) (if (not (= Parse_Char 34)) (shen.pair (hd (shen.pair (tl (hd V2322)) (shen.hdtl V2322))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.<number> (V2324) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2324) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V2324) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2324) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2324) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2324) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2324) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V2326) (if (and (cons? (hd V2326)) (= 101 (hd (hd V2326)))) (shen.pair (hd (shen.pair (tl (hd V2326)) (shen.hdtl V2326))) shen.skip) (fail)))

(defun shen.<log10> (V2328) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2328) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2328) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V2330) (if (cons? (hd V2330)) (let Parse_Char (hd (hd V2330)) (if (= Parse_Char 43) (shen.pair (hd (shen.pair (tl (hd V2330)) (shen.hdtl V2330))) Parse_Char) (fail))) (fail)))

(defun shen.<stop> (V2332) (if (cons? (hd V2332)) (let Parse_Char (hd (hd V2332)) (if (= Parse_Char 46) (shen.pair (hd (shen.pair (tl (hd V2332)) (shen.hdtl V2332))) Parse_Char) (fail))) (fail)))

(defun shen.<predigits> (V2334) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2334) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2334) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V2336) (let Parse_shen.<digits> (shen.<digits> V2336) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V2338) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V2338) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V2338) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V2340) (if (cons? (hd V2340)) (let Parse_X (hd (hd V2340)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2340)) (shen.hdtl V2340))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V2342) (cond ((= 48 V2342) 0) ((= 49 V2342) 1) ((= 50 V2342) 2) ((= 51 V2342) 3) ((= 52 V2342) 4) ((= 53 V2342) 5) ((= 54 V2342) 6) ((= 55 V2342) 7) ((= 56 V2342) 8) ((= 57 V2342) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V2347 V2348) (cond ((= () V2347) 0) ((cons? V2347) (+ (* (shen.expt 10 V2348) (hd V2347)) (shen.pre (tl V2347) (+ V2348 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V2353 V2354) (cond ((= () V2353) 0) ((cons? V2353) (+ (* (shen.expt 10 (- 0 V2354)) (hd V2353)) (shen.post (tl V2353) (+ V2354 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V2359 V2360) (cond ((= 0 V2360) 1) ((> V2360 0) (* V2359 (shen.expt V2359 (- V2360 1)))) (true (* 1.0 (/ (shen.expt V2359 (+ V2360 1)) V2359)))))

(defun shen.<st_input1> (V2362) (let Parse_shen.<st_input> (shen.<st_input> V2362) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V2364) (let Parse_shen.<st_input> (shen.<st_input> V2364) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V2366) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V2366) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V2366) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V2368) (let Parse_shen.<backslash> (shen.<backslash> V2368) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V2370) (if (and (cons? (hd V2370)) (= 92 (hd (hd V2370)))) (shen.pair (hd (shen.pair (tl (hd V2370)) (shen.hdtl V2370))) shen.skip) (fail)))

(defun shen.<anysingle> (V2372) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V2372) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2372) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V2374) (if (cons? (hd V2374)) (let Parse_X (hd (hd V2374)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V2374)) (shen.hdtl V2374))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V2376) (if (cons? (hd V2376)) (let Parse_X (hd (hd V2376)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V2376)) (shen.hdtl V2376))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V2378) (let Parse_shen.<backslash> (shen.<backslash> V2378) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V2380) (if (and (cons? (hd V2380)) (= 42 (hd (hd V2380)))) (shen.pair (hd (shen.pair (tl (hd V2380)) (shen.hdtl V2380))) shen.skip) (fail)))

(defun shen.<anymulti> (V2382) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2382) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V2382) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V2382)) (let Parse_X (hd (hd V2382)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V2382)) (shen.hdtl V2382))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V2384) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V2384) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V2384) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V2386) (if (cons? (hd V2386)) (let Parse_X (hd (hd V2386)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V2386)) (shen.hdtl V2386))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V2388) (cond ((= () V2388) ()) ((and (cons? V2388) (and (cons? (tl V2388)) (and (cons? (tl (tl V2388))) (and (= () (tl (tl (tl V2388)))) (= (hd (tl V2388)) bar!))))) (cons cons (cons (hd V2388) (tl (tl V2388))))) ((cons? V2388) (cons cons (cons (hd V2388) (cons (shen.cons_form (tl V2388)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V2393 V2394) (cond ((and (cons? V2393) (and (= $ (hd V2393)) (and (cons? (tl V2393)) (= () (tl (tl V2393)))))) (append (explode (hd (tl V2393))) V2394)) ((and (cons? V2393) (and (= package (hd V2393)) (and (cons? (tl V2393)) (and (= null (hd (tl V2393))) (cons? (tl (tl V2393))))))) (append (tl (tl (tl V2393))) V2394)) ((and (cons? V2393) (and (= package (hd V2393)) (and (cons? (tl V2393)) (cons? (tl (tl V2393)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V2393)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V2393))) (let PackageNameDot (intern (cn (str (hd (tl V2393))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V2393))) ExpPackageNameDot) (let Internal (shen.record-internal (hd (tl V2393)) (shen.internal-symbols ExpPackageNameDot Packaged)) (append Packaged V2394)))))))) (true (cons V2393 V2394))))

(defun shen.record-exceptions (V2397 V2398) (let CurrExceptions (get/or V2398 shen.external-symbols (freeze ()) (value *property-vector*)) (let AllExceptions (union V2397 CurrExceptions) (put V2398 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V2401 V2402) (put V2401 shen.internal-symbols (union V2402 (get/or V2401 shen.internal-symbols (freeze ()) (value *property-vector*))) (value *property-vector*)))

(defun shen.internal-symbols (V2413 V2414) (cond ((and (symbol? V2414) (shen.prefix? V2413 (explode V2414))) (cons V2414 ())) ((cons? V2414) (union (shen.internal-symbols V2413 (hd V2414)) (shen.internal-symbols V2413 (tl V2414)))) (true ())))

(defun shen.packageh (V2431 V2432 V2433 V2434) (cond ((cons? V2433) (cons (shen.packageh V2431 V2432 (hd V2433) V2434) (shen.packageh V2431 V2432 (tl V2433) V2434))) ((or (shen.sysfunc? V2433) (or (variable? V2433) (or (element? V2433 V2432) (or (shen.doubleunderline? V2433) (shen.singleunderline? V2433))))) V2433) ((and (symbol? V2433) (let ExplodeX (explode V2433) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V2434 ExplodeX))))) (concat V2431 V2433)) (true V2433)))



