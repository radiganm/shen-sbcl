"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun load (V1482) (let Load (let Start (get-time run) (let Result (shen.load-help (value shen.*tc*) (read-file V1482)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (shen.prhush (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if (value shen.*tc*) (shen.prhush (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded)))

(defun shen.load-help (V1489 V1490) (cond ((= false V1489) (for-each (lambda X (shen.prhush (shen.app (shen.eval-without-macros X) "
" shen.s) (stoutput))) V1490)) (true (let RemoveSynonyms (mapcan (lambda X (shen.remove-synonyms X)) V1490) (let Table (mapcan (lambda X (shen.typetable X)) RemoveSynonyms) (let Assume (for-each (lambda X (shen.assumetype X)) Table) (trap-error (for-each (lambda X (shen.typecheck-and-load X)) RemoveSynonyms) (lambda E (shen.unwind-types E Table)))))))))

(defun shen.remove-synonyms (V1492) (cond ((and (cons? V1492) (= shen.synonyms-help (hd V1492))) (do (eval V1492) ())) (true (cons V1492 ()))))

(defun shen.typecheck-and-load (V1494) (do (nl 1) (shen.typecheck-and-evaluate V1494 (gensym A))))

(defun shen.typetable (V1500) (cond ((and (cons? V1500) (and (= define (hd V1500)) (cons? (tl V1500)))) (let Sig (compile (lambda Y (shen.<sig+rest> Y)) (tl (tl V1500)) (lambda E (simple-error (shen.app (hd (tl V1500)) " lacks a proper signature.
" shen.a)))) (cons (cons (hd (tl V1500)) Sig) ()))) (true ())))

(defun shen.assumetype (V1502) (cond ((cons? V1502) (declare (hd V1502) (tl V1502))) (true (shen.f_error shen.assumetype))))

(defun shen.unwind-types (V1509 V1510) (cond ((= () V1510) (simple-error (error-to-string V1509))) ((and (cons? V1510) (cons? (hd V1510))) (do (shen.remtype (hd (hd V1510))) (shen.unwind-types V1509 (tl V1510)))) (true (shen.f_error shen.unwind-types))))

(defun shen.remtype (V1512) (set shen.*signedfuncs* (shen.removetype V1512 (value shen.*signedfuncs*))))

(defun shen.removetype (V1520 V1521) (cond ((= () V1521) ()) ((and (cons? V1521) (and (cons? (hd V1521)) (= (hd (hd V1521)) V1520))) (shen.removetype (hd (hd V1521)) (tl V1521))) ((cons? V1521) (cons (hd V1521) (shen.removetype V1520 (tl V1521)))) (true (shen.f_error shen.removetype))))

(defun shen.<sig+rest> (V1523) (let Parse_shen.<signature> (shen.<signature> V1523) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_<!> (<!> Parse_shen.<signature>) (if (not (= (fail) Parse_<!>)) (shen.pair (hd Parse_<!>) (shen.hdtl Parse_shen.<signature>)) (fail))) (fail))))

(defun write-to-file (V1526 V1527) (let Stream (open V1526 out) (let String (if (string? V1527) (shen.app V1527 "

" shen.a) (shen.app V1527 "

" shen.s)) (let Write (pr String Stream) (let Close (close Stream) V1527)))))



