"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.loop)))

(defun shen.shen2 () (do (shen.credits) (shen.loop)))

(set shen.*continue-repl-loop* true)

(defun exit (V3800) (set shen.*continue-repl-loop* false))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (if (value shen.*continue-repl-loop*) (shen.loop) exit)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3802) (cond ((= () V3802) ()) ((and (cons? V3802) (cons? (tl V3802))) (do (set (hd V3802) (hd (tl V3802))) (shen.multiple-set (tl (tl V3802))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3804) (declare V3804 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3816 V3817) (cond ((and (tuple? V3816) (and (cons? (snd V3816)) (element? (hd (snd V3816)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3816) (tl (snd V3816))) V3817)) ((and (tuple? V3816) (and (cons? (snd V3816)) (and (cons? (tl (snd V3816))) (and (= () (tl (tl (snd V3816)))) (and (cons? V3817) (and (= (hd (snd V3816)) (shen.exclamation)) (= (hd (tl (snd V3816))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3817))) (hd V3817))) ((and (tuple? V3816) (and (cons? (snd V3816)) (= (hd (snd V3816)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3816)) V3817) (let Find (head (shen.find-past-inputs Key? V3817)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3816) (and (cons? (snd V3816)) (and (= () (tl (snd V3816))) (= (hd (snd V3816)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3817) 0) (abort))) ((and (tuple? V3816) (and (cons? (snd V3816)) (= (hd (snd V3816)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3816)) V3817) (let Pastprint (shen.print-past-inputs Key? (reverse V3817) 0) (abort)))) (true V3816)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3819) (do (for-each (lambda Byte (pr (n->string Byte) (stoutput))) V3819) (nl 1)))

(defun shen.update_history (V3822 V3823) (set shen.*history* (cons V3822 V3823)))

(defun shen.toplineread () (shen.toplineread_loop (read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V3827 V3828) (cond ((and (= -1 V3827) (= () V3828)) (exit 0)) ((= V3827 (shen.hat)) (simple-error "line read aborted")) ((element? V3827 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3828 (lambda E shen.nextline)) (let It (shen.record-it V3828) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-char-code (stinput)) (append V3828 (cons V3827 ()))) (@p Line V3828))))) (true (shen.toplineread_loop (read-char-code (stinput)) (if (= V3827 -1) V3828 (append V3828 (cons V3827 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3834) (cond ((= + V3834) (set shen.*tc* true)) ((= - V3834) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (shen.prhush (cn "
>" "< ") (sterror)))

(defun shen.prompt2 () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3836) (shen.toplevel_evaluate V3836 (value shen.*tc*)))

(defun shen.find-past-inputs (V3839 V3840) (let F (shen.find V3839 V3840) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3843 V3844) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3843 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3844)))) (lambda X (shen.prefix? V3843 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3846) (cond ((and (cons? V3846) (= (hd V3846) (shen.space))) (shen.trim-gubbins (tl V3846))) ((and (cons? V3846) (= (hd V3846) (shen.newline))) (shen.trim-gubbins (tl V3846))) ((and (cons? V3846) (= (hd V3846) (shen.carriage-return))) (shen.trim-gubbins (tl V3846))) ((and (cons? V3846) (= (hd V3846) (shen.tab))) (shen.trim-gubbins (tl V3846))) ((and (cons? V3846) (= (hd V3846) (shen.left-round))) (shen.trim-gubbins (tl V3846))) (true V3846)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3855 V3856) (cond ((= () V3856) ()) ((and (cons? V3856) (V3855 (hd V3856))) (cons (hd V3856) (shen.find V3855 (tl V3856)))) ((cons? V3856) (shen.find V3855 (tl V3856))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V3870 V3871) (cond ((= () V3870) true) ((and (cons? V3870) (and (cons? V3871) (= (hd V3871) (hd V3870)))) (shen.prefix? (tl V3870) (tl V3871))) (true false)))

(defun shen.print-past-inputs (V3883 V3884 V3885) (cond ((= () V3884) _) ((and (cons? V3884) (not (V3883 (hd V3884)))) (shen.print-past-inputs V3883 (tl V3884) (+ V3885 1))) ((and (cons? V3884) (tuple? (hd V3884))) (do (shen.prhush (shen.app V3885 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V3884))) (shen.print-past-inputs V3883 (tl V3884) (+ V3885 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V3888 V3889) (cond ((and (cons? V3888) (and (cons? (tl V3888)) (and (= : (hd (tl V3888))) (and (cons? (tl (tl V3888))) (and (= () (tl (tl (tl V3888)))) (= true V3889)))))) (shen.typecheck-and-evaluate (hd V3888) (hd (tl (tl V3888))))) ((and (cons? V3888) (cons? (tl V3888))) (do (shen.toplevel_evaluate (cons (hd V3888) ()) V3889) (do (nl 1) (shen.toplevel_evaluate (tl V3888) V3889)))) ((and (cons? V3888) (and (= () (tl V3888)) (= true V3889))) (shen.typecheck-and-evaluate (hd V3888) (gensym A))) ((and (cons? V3888) (and (= () (tl V3888)) (= false V3889))) (let Eval (shen.eval-without-macros (hd V3888)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V3892 V3893) (let Typecheck (shen.typecheck V3892 V3893) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V3892) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V3895) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V3895) V3895))

(defun shen.extract-pvars (V3901) (cond ((shen.pvar? V3901) (cons V3901 ())) ((cons? V3901) (union (shen.extract-pvars (hd V3901)) (shen.extract-pvars (tl V3901)))) (true ())))

(defun shen.mult_subst (V3909 V3910 V3911) (cond ((= () V3909) V3911) ((= () V3910) V3911) ((and (cons? V3909) (cons? V3910)) (shen.mult_subst (tl V3909) (tl V3910) (subst (hd V3909) (hd V3910) V3911))) (true (shen.f_error shen.mult_subst))))



