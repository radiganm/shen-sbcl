"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.<defprolog> (V1618) (let Parse_shen.<predicate*> (shen.<predicate*> V1618) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))

(defun shen.prolog-error (V1627 V1628) (cond ((and (cons? V1628) (and (cons? (tl V1628)) (= () (tl (tl V1628))))) (simple-error (cn "prolog syntax error in " (shen.app V1627 (cn " here:

 " (shen.app (shen.next-50 50 (hd V1628)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V1627 "
" shen.a))))))

(defun shen.next-50 (V1635 V1636) (cond ((= () V1636) "") ((= 0 V1635) "") ((cons? V1636) (cn (shen.decons-string (hd V1636)) (shen.next-50 (- V1635 1) (tl V1636)))) (true (shen.f_error shen.next-50))))

(defun shen.decons-string (V1638) (cond ((and (cons? V1638) (and (= cons (hd V1638)) (and (cons? (tl V1638)) (and (cons? (tl (tl V1638))) (= () (tl (tl (tl V1638)))))))) (shen.app (shen.eval-cons V1638) " " shen.s)) (true (shen.app V1638 " " shen.r))))

(defun shen.insert-predicate (V1641 V1642) (cond ((and (cons? V1642) (and (cons? (tl V1642)) (= () (tl (tl V1642))))) (cons (cons V1641 (hd V1642)) (cons :- (tl V1642)))) (true (shen.f_error shen.insert-predicate))))

(defun shen.<predicate*> (V1644) (if (cons? (hd V1644)) (let Parse_X (hd (hd V1644)) (shen.pair (hd (shen.pair (tl (hd V1644)) (shen.hdtl V1644))) Parse_X)) (fail)))

(defun shen.<clauses*> (V1646) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V1646) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1646) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<clause*> (V1648) (let Parse_shen.<head*> (shen.<head*> V1648) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))

(defun shen.<head*> (V1650) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V1650) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1650) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<term*> (V1652) (if (cons? (hd V1652)) (let Parse_X (hd (hd V1652)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V1652)) (shen.hdtl V1652))) (shen.eval-cons Parse_X)) (fail))) (fail)))

(defun shen.legitimate-term? (V1658) (cond ((and (cons? V1658) (and (= cons (hd V1658)) (and (cons? (tl V1658)) (and (cons? (tl (tl V1658))) (= () (tl (tl (tl V1658)))))))) (and (shen.legitimate-term? (hd (tl V1658))) (shen.legitimate-term? (hd (tl (tl V1658)))))) ((and (cons? V1658) (and (= mode (hd V1658)) (and (cons? (tl V1658)) (and (cons? (tl (tl V1658))) (and (= + (hd (tl (tl V1658)))) (= () (tl (tl (tl V1658))))))))) (shen.legitimate-term? (hd (tl V1658)))) ((and (cons? V1658) (and (= mode (hd V1658)) (and (cons? (tl V1658)) (and (cons? (tl (tl V1658))) (and (= - (hd (tl (tl V1658)))) (= () (tl (tl (tl V1658))))))))) (shen.legitimate-term? (hd (tl V1658)))) ((cons? V1658) false) (true true)))

(defun shen.eval-cons (V1660) (cond ((and (cons? V1660) (and (= cons (hd V1660)) (and (cons? (tl V1660)) (and (cons? (tl (tl V1660))) (= () (tl (tl (tl V1660)))))))) (cons (shen.eval-cons (hd (tl V1660))) (shen.eval-cons (hd (tl (tl V1660)))))) ((and (cons? V1660) (and (= mode (hd V1660)) (and (cons? (tl V1660)) (and (cons? (tl (tl V1660))) (= () (tl (tl (tl V1660)))))))) (cons mode (cons (shen.eval-cons (hd (tl V1660))) (tl (tl V1660))))) (true V1660)))

(defun shen.<body*> (V1662) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V1662) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1662) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<literal*> (V1664) (let YaccParse (if (and (cons? (hd V1664)) (= ! (hd (hd V1664)))) (shen.pair (hd (shen.pair (tl (hd V1664)) (shen.hdtl V1664))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V1664)) (let Parse_X (hd (hd V1664)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1664)) (shen.hdtl V1664))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<end*> (V1666) (if (cons? (hd V1666)) (let Parse_X (hd (hd V1666)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1666)) (shen.hdtl V1666))) Parse_X) (fail))) (fail)))

(defun cut (V1670 V1671 V1672) (let Result (thaw V1672) (if (= Result false) V1670 Result)))

(defun shen.insert_modes (V1674) (cond ((and (cons? V1674) (and (= mode (hd V1674)) (and (cons? (tl V1674)) (and (cons? (tl (tl V1674))) (= () (tl (tl (tl V1674)))))))) V1674) ((= () V1674) ()) ((cons? V1674) (cons (cons mode (cons (hd V1674) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V1674)) (cons - ()))))) (true V1674)))

(defun shen.s-prolog (V1676) (map (lambda X (eval X)) (shen.prolog->shen V1676)))

(defun shen.prolog->shen (V1678) (map (lambda X (shen.compile_prolog_procedure X)) (shen.group_clauses (map (lambda X (shen.s-prolog_clause X)) (mapcan (lambda X (shen.head_abstraction X)) V1678)))))

(defun shen.s-prolog_clause (V1680) (cond ((and (cons? V1680) (and (cons? (tl V1680)) (and (= :- (hd (tl V1680))) (and (cons? (tl (tl V1680))) (= () (tl (tl (tl V1680)))))))) (cons (hd V1680) (cons :- (cons (map (lambda X (shen.s-prolog_literal X)) (hd (tl (tl V1680)))) ())))) (true (shen.f_error shen.s-prolog_clause))))

(defun shen.head_abstraction (V1682) (cond ((and (cons? V1682) (and (cons? (tl V1682)) (and (= :- (hd (tl V1682))) (and (cons? (tl (tl V1682))) (and (= () (tl (tl (tl V1682)))) (< (shen.complexity_head (hd V1682)) (value shen.*maxcomplexity*))))))) (cons V1682 ())) ((and (cons? V1682) (and (cons? (hd V1682)) (and (cons? (tl V1682)) (and (= :- (hd (tl V1682))) (and (cons? (tl (tl V1682))) (= () (tl (tl (tl V1682))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V1682))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V1682)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V1682)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V1682)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))

(defun shen.complexity_head (V1688) (cond ((cons? V1688) (shen.product (map (lambda X (shen.complexity X)) (tl V1688)))) (true (shen.f_error shen.complexity_head))))

(defun shen.complexity (V1697) (cond ((and (cons? V1697) (and (= mode (hd V1697)) (and (cons? (tl V1697)) (and (cons? (hd (tl V1697))) (and (= mode (hd (hd (tl V1697)))) (and (cons? (tl (hd (tl V1697)))) (and (cons? (tl (tl (hd (tl V1697))))) (and (= () (tl (tl (tl (hd (tl V1697)))))) (and (cons? (tl (tl V1697))) (= () (tl (tl (tl V1697))))))))))))) (shen.complexity (hd (tl V1697)))) ((and (cons? V1697) (and (= mode (hd V1697)) (and (cons? (tl V1697)) (and (cons? (hd (tl V1697))) (and (cons? (tl (tl V1697))) (and (= + (hd (tl (tl V1697)))) (= () (tl (tl (tl V1697)))))))))) (* 2 (* (shen.complexity (cons mode (cons (hd (hd (tl V1697))) (tl (tl V1697))))) (shen.complexity (cons mode (cons (tl (hd (tl V1697))) (tl (tl V1697)))))))) ((and (cons? V1697) (and (= mode (hd V1697)) (and (cons? (tl V1697)) (and (cons? (hd (tl V1697))) (and (cons? (tl (tl V1697))) (and (= - (hd (tl (tl V1697)))) (= () (tl (tl (tl V1697)))))))))) (* (shen.complexity (cons mode (cons (hd (hd (tl V1697))) (tl (tl V1697))))) (shen.complexity (cons mode (cons (tl (hd (tl V1697))) (tl (tl V1697))))))) ((and (cons? V1697) (and (= mode (hd V1697)) (and (cons? (tl V1697)) (and (cons? (tl (tl V1697))) (and (= () (tl (tl (tl V1697)))) (variable? (hd (tl V1697)))))))) 1) ((and (cons? V1697) (and (= mode (hd V1697)) (and (cons? (tl V1697)) (and (cons? (tl (tl V1697))) (and (= + (hd (tl (tl V1697)))) (= () (tl (tl (tl V1697))))))))) 2) ((and (cons? V1697) (and (= mode (hd V1697)) (and (cons? (tl V1697)) (and (cons? (tl (tl V1697))) (and (= - (hd (tl (tl V1697)))) (= () (tl (tl (tl V1697))))))))) 1) (true (shen.complexity (cons mode (cons V1697 (cons + ())))))))

(defun shen.product (V1699) (cond ((= () V1699) 1) ((cons? V1699) (* (hd V1699) (shen.product (tl V1699)))) (true (shen.f_error shen.product))))

(defun shen.s-prolog_literal (V1701) (cond ((and (cons? V1701) (and (= is (hd V1701)) (and (cons? (tl V1701)) (and (cons? (tl (tl V1701))) (= () (tl (tl (tl V1701)))))))) (cons bind (cons (hd (tl V1701)) (cons (shen.insert_deref (hd (tl (tl V1701)))) ())))) ((and (cons? V1701) (and (= when (hd V1701)) (and (cons? (tl V1701)) (= () (tl (tl V1701)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V1701))) ()))) ((and (cons? V1701) (and (= bind (hd V1701)) (and (cons? (tl V1701)) (and (cons? (tl (tl V1701))) (= () (tl (tl (tl V1701)))))))) (cons bind (cons (hd (tl V1701)) (cons (shen.insert_lazyderef (hd (tl (tl V1701)))) ())))) ((and (cons? V1701) (and (= fwhen (hd V1701)) (and (cons? (tl V1701)) (= () (tl (tl V1701)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V1701))) ()))) ((cons? V1701) V1701) (true (shen.f_error shen.s-prolog_literal))))

(defun shen.insert_deref (V1703) (cond ((variable? V1703) (cons shen.deref (cons V1703 (cons ProcessN ())))) ((cons? V1703) (cons (shen.insert_deref (hd V1703)) (shen.insert_deref (tl V1703)))) (true V1703)))

(defun shen.insert_lazyderef (V1705) (cond ((variable? V1705) (cons shen.lazyderef (cons V1705 (cons ProcessN ())))) ((cons? V1705) (cons (shen.insert_lazyderef (hd V1705)) (shen.insert_lazyderef (tl V1705)))) (true V1705)))

(defun shen.group_clauses (V1707) (cond ((= () V1707) ()) ((cons? V1707) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V1707) X)) V1707) (let Rest (difference V1707 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))

(defun shen.collect (V1712 V1713) (cond ((= () V1713) ()) ((cons? V1713) (if (V1712 (hd V1713)) (cons (hd V1713) (shen.collect V1712 (tl V1713))) (shen.collect V1712 (tl V1713)))) (true (shen.f_error shen.collect))))

(defun shen.same_predicate? (V1732 V1733) (cond ((and (cons? V1732) (and (cons? (hd V1732)) (and (cons? V1733) (cons? (hd V1733))))) (= (hd (hd V1732)) (hd (hd V1733)))) (true (shen.f_error shen.same_predicate?))))

(defun shen.compile_prolog_procedure (V1735) (let F (shen.procedure_name V1735) (let Shen (shen.clauses-to-shen F V1735) Shen)))

(defun shen.procedure_name (V1749) (cond ((and (cons? V1749) (and (cons? (hd V1749)) (cons? (hd (hd V1749))))) (hd (hd (hd V1749)))) (true (shen.f_error shen.procedure_name))))

(defun shen.clauses-to-shen (V1752 V1753) (let Linear (map (lambda X (shen.linearise-clause X)) V1753) (let Arity (shen.prolog-aritycheck V1752 (map (lambda X (head X)) V1753)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda X (shen.aum_to_shen X)) AUM_instructions))) (let ShenDef (cons define (cons V1752 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))

(defun shen.catch-cut (V1755) (cond ((not (shen.occurs? cut V1755)) V1755) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V1755 ()))) ())))))))

(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))

(defun shen.cutpoint (V1763 V1764) (cond ((= V1764 V1763) false) (true V1764)))

(defun shen.nest-disjunct (V1766) (cond ((and (cons? V1766) (= () (tl V1766))) (hd V1766)) ((cons? V1766) (shen.lisp-or (hd V1766) (shen.nest-disjunct (tl V1766)))) (true (shen.f_error shen.nest-disjunct))))

(defun shen.lisp-or (V1769 V1770) (cons let (cons Case (cons V1769 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V1770 (cons Case ())))) ())))))

(defun shen.prolog-aritycheck (V1775 V1776) (cond ((and (cons? V1776) (= () (tl V1776))) (- (length (hd V1776)) 1)) ((and (cons? V1776) (cons? (tl V1776))) (if (= (length (hd V1776)) (length (hd (tl V1776)))) (shen.prolog-aritycheck V1775 (tl V1776)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V1775 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))

(defun shen.linearise-clause (V1778) (cond ((and (cons? V1778) (and (cons? (tl V1778)) (and (= :- (hd (tl V1778))) (and (cons? (tl (tl V1778))) (= () (tl (tl (tl V1778)))))))) (let Linear (shen.linearise (cons (hd V1778) (tl (tl V1778)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))

(defun shen.clause_form (V1780) (cond ((and (cons? V1780) (and (cons? (tl V1780)) (= () (tl (tl V1780))))) (cons (shen.explicit_modes (hd V1780)) (cons :- (cons (shen.cf_help (hd (tl V1780))) ())))) (true (shen.f_error shen.clause_form))))

(defun shen.explicit_modes (V1782) (cond ((cons? V1782) (cons (hd V1782) (map (lambda X (shen.em_help X)) (tl V1782)))) (true (shen.f_error shen.explicit_modes))))

(defun shen.em_help (V1784) (cond ((and (cons? V1784) (and (= mode (hd V1784)) (and (cons? (tl V1784)) (and (cons? (tl (tl V1784))) (= () (tl (tl (tl V1784)))))))) V1784) (true (cons mode (cons V1784 (cons + ()))))))

(defun shen.cf_help (V1786) (cond ((and (cons? V1786) (and (= where (hd V1786)) (and (cons? (tl V1786)) (and (cons? (hd (tl V1786))) (and (= = (hd (hd (tl V1786)))) (and (cons? (tl (hd (tl V1786)))) (and (cons? (tl (tl (hd (tl V1786))))) (and (= () (tl (tl (tl (hd (tl V1786)))))) (and (cons? (tl (tl V1786))) (= () (tl (tl (tl V1786))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V1786)))) (shen.cf_help (hd (tl (tl V1786)))))) (true V1786)))

(defun occurs-check (V1792) (cond ((= + V1792) (set shen.*occurs* true)) ((= - V1792) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))

(defun shen.aum (V1795 V1796) (cond ((and (cons? V1795) (and (cons? (hd V1795)) (and (cons? (tl V1795)) (and (= :- (hd (tl V1795))) (and (cons? (tl (tl V1795))) (= () (tl (tl (tl V1795))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V1795)) (cons (shen.continuation_call (tl (hd V1795)) (hd (tl (tl V1795)))) ()))) V1796) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))

(defun shen.continuation_call (V1799 V1800) (let VTerms (cons ProcessN (shen.extract_vars V1799)) (let VBody (shen.extract_vars V1800) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V1800)))))

(defun remove (V1803 V1804) (shen.remove-h V1803 V1804 ()))

(defun shen.remove-h (V1811 V1812 V1813) (cond ((= () V1812) (reverse V1813)) ((and (cons? V1812) (= (hd V1812) V1811)) (shen.remove-h (hd V1812) (tl V1812) V1813)) ((cons? V1812) (shen.remove-h V1811 (tl V1812) (cons (hd V1812) V1813))) (true (shen.f_error shen.remove-h))))

(defun shen.cc_help (V1816 V1817) (cond ((and (= () V1816) (= () V1817)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V1817) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1816 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V1816) (cons call (cons shen.the (cons shen.continuation (cons V1817 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V1816 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V1817 ())))) ())))))))))))

(defun shen.make_mu_application (V1820 V1821) (cond ((and (cons? V1820) (and (= shen.mu (hd V1820)) (and (cons? (tl V1820)) (and (= () (hd (tl V1820))) (and (cons? (tl (tl V1820))) (and (= () (tl (tl (tl V1820)))) (= () V1821))))))) (hd (tl (tl V1820)))) ((and (cons? V1820) (and (= shen.mu (hd V1820)) (and (cons? (tl V1820)) (and (cons? (hd (tl V1820))) (and (cons? (tl (tl V1820))) (and (= () (tl (tl (tl V1820)))) (cons? V1821))))))) (cons (cons shen.mu (cons (hd (hd (tl V1820))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V1820))) (tl (tl V1820)))) (tl V1821)) ()))) (cons (hd V1821) ()))) (true (shen.f_error shen.make_mu_application))))

(defun shen.mu_reduction (V1830 V1831) (cond ((and (cons? V1830) (and (cons? (hd V1830)) (and (= shen.mu (hd (hd V1830))) (and (cons? (tl (hd V1830))) (and (cons? (hd (tl (hd V1830)))) (and (= mode (hd (hd (tl (hd V1830))))) (and (cons? (tl (hd (tl (hd V1830))))) (and (cons? (tl (tl (hd (tl (hd V1830)))))) (and (= () (tl (tl (tl (hd (tl (hd V1830))))))) (and (cons? (tl (tl (hd V1830)))) (and (= () (tl (tl (tl (hd V1830))))) (and (cons? (tl V1830)) (= () (tl (tl V1830))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V1830))))) (tl (tl (hd V1830))))) (tl V1830)) (hd (tl (tl (hd (tl (hd V1830)))))))) ((and (cons? V1830) (and (cons? (hd V1830)) (and (= shen.mu (hd (hd V1830))) (and (cons? (tl (hd V1830))) (and (cons? (tl (tl (hd V1830)))) (and (= () (tl (tl (tl (hd V1830))))) (and (cons? (tl V1830)) (and (= () (tl (tl V1830))) (= _ (hd (tl (hd V1830)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V1830)))) V1831)) ((and (cons? V1830) (and (cons? (hd V1830)) (and (= shen.mu (hd (hd V1830))) (and (cons? (tl (hd V1830))) (and (cons? (tl (tl (hd V1830)))) (and (= () (tl (tl (tl (hd V1830))))) (and (cons? (tl V1830)) (and (= () (tl (tl V1830))) (shen.ephemeral_variable? (hd (tl (hd V1830))) (hd (tl V1830))))))))))) (subst (hd (tl V1830)) (hd (tl (hd V1830))) (shen.mu_reduction (hd (tl (tl (hd V1830)))) V1831))) ((and (cons? V1830) (and (cons? (hd V1830)) (and (= shen.mu (hd (hd V1830))) (and (cons? (tl (hd V1830))) (and (cons? (tl (tl (hd V1830)))) (and (= () (tl (tl (tl (hd V1830))))) (and (cons? (tl V1830)) (and (= () (tl (tl V1830))) (variable? (hd (tl (hd V1830)))))))))))) (cons let (cons (hd (tl (hd V1830))) (cons shen.be (cons (hd (tl V1830)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1830)))) V1831) ()))))))) ((and (cons? V1830) (and (cons? (hd V1830)) (and (= shen.mu (hd (hd V1830))) (and (cons? (tl (hd V1830))) (and (cons? (tl (tl (hd V1830)))) (and (= () (tl (tl (tl (hd V1830))))) (and (cons? (tl V1830)) (and (= () (tl (tl V1830))) (and (= - V1831) (shen.prolog_constant? (hd (tl (hd V1830))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1830))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V1830))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V1830)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V1830) (and (cons? (hd V1830)) (and (= shen.mu (hd (hd V1830))) (and (cons? (tl (hd V1830))) (and (cons? (tl (tl (hd V1830)))) (and (= () (tl (tl (tl (hd V1830))))) (and (cons? (tl V1830)) (and (= () (tl (tl V1830))) (and (= + V1831) (shen.prolog_constant? (hd (tl (hd V1830))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1830))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V1830))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V1830)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V1830))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1830)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V1830) (and (cons? (hd V1830)) (and (= shen.mu (hd (hd V1830))) (and (cons? (tl (hd V1830))) (and (cons? (hd (tl (hd V1830)))) (and (cons? (tl (tl (hd V1830)))) (and (= () (tl (tl (tl (hd V1830))))) (and (cons? (tl V1830)) (and (= () (tl (tl V1830))) (= - V1831)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1830))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V1830)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V1830)))) (tl (tl (hd V1830))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V1830) (and (cons? (hd V1830)) (and (= shen.mu (hd (hd V1830))) (and (cons? (tl (hd V1830))) (and (cons? (hd (tl (hd V1830)))) (and (cons? (tl (tl (hd V1830)))) (and (= () (tl (tl (tl (hd V1830))))) (and (cons? (tl V1830)) (and (= () (tl (tl V1830))) (= + V1831)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V1830))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V1830)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V1830)))) (tl (tl (hd V1830))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V1830)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V1830))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V1830)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V1830)))

(defun shen.rcons_form (V1833) (cond ((cons? V1833) (cons cons (cons (shen.rcons_form (hd V1833)) (cons (shen.rcons_form (tl V1833)) ())))) (true V1833)))

(defun shen.remove_modes (V1835) (cond ((and (cons? V1835) (and (= mode (hd V1835)) (and (cons? (tl V1835)) (and (cons? (tl (tl V1835))) (and (= + (hd (tl (tl V1835)))) (= () (tl (tl (tl V1835))))))))) (shen.remove_modes (hd (tl V1835)))) ((and (cons? V1835) (and (= mode (hd V1835)) (and (cons? (tl V1835)) (and (cons? (tl (tl V1835))) (and (= - (hd (tl (tl V1835)))) (= () (tl (tl (tl V1835))))))))) (shen.remove_modes (hd (tl V1835)))) ((cons? V1835) (cons (shen.remove_modes (hd V1835)) (shen.remove_modes (tl V1835)))) (true V1835)))

(defun shen.ephemeral_variable? (V1838 V1839) (and (variable? V1838) (variable? V1839)))

(defun shen.prolog_constant? (V1849) (cond ((cons? V1849) false) (true true)))

(defun shen.aum_to_shen (V1851) (cond ((and (cons? V1851) (and (= let (hd V1851)) (and (cons? (tl V1851)) (and (cons? (tl (tl V1851))) (and (= shen.be (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (and (cons? (tl (tl (tl (tl V1851))))) (and (= in (hd (tl (tl (tl (tl V1851)))))) (and (cons? (tl (tl (tl (tl (tl V1851)))))) (= () (tl (tl (tl (tl (tl (tl V1851)))))))))))))))) (cons let (cons (hd (tl V1851)) (cons (shen.aum_to_shen (hd (tl (tl (tl V1851))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1851))))))) ()))))) ((and (cons? V1851) (and (= shen.the (hd V1851)) (and (cons? (tl V1851)) (and (= shen.result (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= shen.of (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (and (= shen.dereferencing (hd (tl (tl (tl V1851))))) (and (cons? (tl (tl (tl (tl V1851))))) (= () (tl (tl (tl (tl (tl V1851))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V1851)))))) (cons ProcessN ())))) ((and (cons? V1851) (and (= if (hd V1851)) (and (cons? (tl V1851)) (and (cons? (tl (tl V1851))) (and (= shen.then (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (and (cons? (tl (tl (tl (tl V1851))))) (and (= shen.else (hd (tl (tl (tl (tl V1851)))))) (and (cons? (tl (tl (tl (tl (tl V1851)))))) (= () (tl (tl (tl (tl (tl (tl V1851)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V1851))) (cons (shen.aum_to_shen (hd (tl (tl (tl V1851))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1851))))))) ()))))) ((and (cons? V1851) (and (cons? (tl V1851)) (and (= is (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= shen.a (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (and (= shen.variable (hd (tl (tl (tl V1851))))) (= () (tl (tl (tl (tl V1851)))))))))))) (cons shen.pvar? (cons (hd V1851) ()))) ((and (cons? V1851) (and (cons? (tl V1851)) (and (= is (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= shen.a (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (and (= shen.non-empty (hd (tl (tl (tl V1851))))) (and (cons? (tl (tl (tl (tl V1851))))) (and (= list (hd (tl (tl (tl (tl V1851)))))) (= () (tl (tl (tl (tl (tl V1851))))))))))))))) (cons cons? (cons (hd V1851) ()))) ((and (cons? V1851) (and (= shen.rename (hd V1851)) (and (cons? (tl V1851)) (and (= shen.the (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= shen.variables (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (and (= in (hd (tl (tl (tl V1851))))) (and (cons? (tl (tl (tl (tl V1851))))) (and (= () (hd (tl (tl (tl (tl V1851)))))) (and (cons? (tl (tl (tl (tl (tl V1851)))))) (and (= and (hd (tl (tl (tl (tl (tl V1851))))))) (and (cons? (tl (tl (tl (tl (tl (tl V1851))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V1851)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V1851)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V1851)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V1851)))))))))) ((and (cons? V1851) (and (= shen.rename (hd V1851)) (and (cons? (tl V1851)) (and (= shen.the (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= shen.variables (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (and (= in (hd (tl (tl (tl V1851))))) (and (cons? (tl (tl (tl (tl V1851))))) (and (cons? (hd (tl (tl (tl (tl V1851)))))) (and (cons? (tl (tl (tl (tl (tl V1851)))))) (and (= and (hd (tl (tl (tl (tl (tl V1851))))))) (and (cons? (tl (tl (tl (tl (tl (tl V1851))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V1851)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V1851)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V1851)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V1851)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V1851)))))) (tl (tl (tl (tl (tl V1851))))))))))) ()))))) ((and (cons? V1851) (and (= bind (hd V1851)) (and (cons? (tl V1851)) (and (cons? (tl (tl V1851))) (and (= shen.to (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (and (cons? (tl (tl (tl (tl V1851))))) (and (= in (hd (tl (tl (tl (tl V1851)))))) (and (cons? (tl (tl (tl (tl (tl V1851)))))) (= () (tl (tl (tl (tl (tl (tl V1851)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V1851)) (cons (shen.chwild (hd (tl (tl (tl V1851))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V1851))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V1851)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V1851) (and (cons? (tl V1851)) (and (= is (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= identical (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (and (= shen.to (hd (tl (tl (tl V1851))))) (and (cons? (tl (tl (tl (tl V1851))))) (= () (tl (tl (tl (tl (tl V1851)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V1851))))) (cons (hd V1851) ())))) ((= shen.failed! V1851) false) ((and (cons? V1851) (and (= shen.the (hd V1851)) (and (cons? (tl V1851)) (and (= head (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= shen.of (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (= () (tl (tl (tl (tl V1851)))))))))))) (cons hd (tl (tl (tl V1851))))) ((and (cons? V1851) (and (= shen.the (hd V1851)) (and (cons? (tl V1851)) (and (= tail (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= shen.of (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (= () (tl (tl (tl (tl V1851)))))))))))) (cons tl (tl (tl (tl V1851))))) ((and (cons? V1851) (and (= shen.pop (hd V1851)) (and (cons? (tl V1851)) (and (= shen.the (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= shen.stack (hd (tl (tl V1851)))) (= () (tl (tl (tl V1851)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V1851) (and (= call (hd V1851)) (and (cons? (tl V1851)) (and (= shen.the (hd (tl V1851))) (and (cons? (tl (tl V1851))) (and (= shen.continuation (hd (tl (tl V1851)))) (and (cons? (tl (tl (tl V1851)))) (= () (tl (tl (tl (tl V1851)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V1851))))) ProcessN Continuation) ())))) (true V1851)))

(defun shen.chwild (V1853) (cond ((= V1853 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V1853) (map (lambda Z (shen.chwild Z)) V1853)) (true V1853)))

(defun shen.newpv (V1855) (let Count+1 (+ (<-address (value shen.*varcounter*) V1855) 1) (let IncVar (address-> (value shen.*varcounter*) V1855 Count+1) (let Vector (<-address (value shen.*prologvectors*) V1855) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V1855 Count+1) shen.skip) (shen.mk-pvar Count+1))))))

(defun shen.resizeprocessvector (V1858 V1859) (let Vector (<-address (value shen.*prologvectors*) V1858) (let BigVector (shen.resize-vector Vector (+ V1859 V1859) shen.-null-) (address-> (value shen.*prologvectors*) V1858 BigVector))))

(defun shen.resize-vector (V1863 V1864 V1865) (let BigVector (address-> (absvector (+ 1 V1864)) 0 V1864) (shen.copy-vector V1863 BigVector (limit V1863) V1864 V1865)))

(defun shen.copy-vector (V1871 V1872 V1873 V1874 V1875) (shen.copy-vector-stage-2 (+ 1 V1873) (+ V1874 1) V1875 (shen.copy-vector-stage-1 1 V1871 V1872 (+ 1 V1873))))

(defun shen.copy-vector-stage-1 (V1883 V1884 V1885 V1886) (cond ((= V1886 V1883) V1885) (true (shen.copy-vector-stage-1 (+ 1 V1883) V1884 (address-> V1885 V1883 (<-address V1884 V1883)) V1886))))

(defun shen.copy-vector-stage-2 (V1894 V1895 V1896 V1897) (cond ((= V1895 V1894) V1897) (true (shen.copy-vector-stage-2 (+ V1894 1) V1895 V1896 (address-> V1897 V1894 V1896)))))

(defun shen.mk-pvar (V1899) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V1899))

(defun shen.pvar? (V1901) (and (absvector? V1901) (= (<-address/or V1901 0 (freeze shen.not-pvar)) shen.pvar)))

(defun shen.bindv (V1905 V1906 V1907) (let Vector (<-address (value shen.*prologvectors*) V1907) (address-> Vector (<-address V1905 1) V1906)))

(defun shen.unbindv (V1910 V1911) (let Vector (<-address (value shen.*prologvectors*) V1911) (address-> Vector (<-address V1910 1) shen.-null-)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.call_the_continuation (V1915 V1916 V1917) (cond ((and (cons? V1915) (and (cons? (hd V1915)) (= () (tl V1915)))) (cons (hd (hd V1915)) (append (tl (hd V1915)) (cons V1916 (cons V1917 ()))))) ((and (cons? V1915) (cons? (hd V1915))) (let NewContinuation (shen.newcontinuation (tl V1915) V1916 V1917) (cons (hd (hd V1915)) (append (tl (hd V1915)) (cons V1916 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))

(defun shen.newcontinuation (V1921 V1922 V1923) (cond ((= () V1921) V1923) ((and (cons? V1921) (cons? (hd V1921))) (cons freeze (cons (cons (hd (hd V1921)) (append (tl (hd V1921)) (cons V1922 (cons (shen.newcontinuation (tl V1921) V1922 V1923) ())))) ()))) (true (shen.f_error shen.newcontinuation))))

(defun return (V1931 V1932 V1933) (shen.deref V1931 V1932))

(defun shen.measure&return (V1941 V1942 V1943) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V1941 V1942)))

(defun unify (V1948 V1949 V1950 V1951) (shen.lzy= (shen.lazyderef V1948 V1950) (shen.lazyderef V1949 V1950) V1950 V1951))

(defun shen.lzy= (V1973 V1974 V1975 V1976) (cond ((= V1974 V1973) (thaw V1976)) ((shen.pvar? V1973) (bind V1973 V1974 V1975 V1976)) ((shen.pvar? V1974) (bind V1974 V1973 V1975 V1976)) ((and (cons? V1973) (cons? V1974)) (shen.lzy= (shen.lazyderef (hd V1973) V1975) (shen.lazyderef (hd V1974) V1975) V1975 (freeze (shen.lzy= (shen.lazyderef (tl V1973) V1975) (shen.lazyderef (tl V1974) V1975) V1975 V1976)))) (true false)))

(defun shen.deref (V1979 V1980) (cond ((cons? V1979) (cons (shen.deref (hd V1979) V1980) (shen.deref (tl V1979) V1980))) (true (if (shen.pvar? V1979) (let Value (shen.valvector V1979 V1980) (if (= Value shen.-null-) V1979 (shen.deref Value V1980))) V1979))))

(defun shen.lazyderef (V1983 V1984) (if (shen.pvar? V1983) (let Value (shen.valvector V1983 V1984) (if (= Value shen.-null-) V1983 (shen.lazyderef Value V1984))) V1983))

(defun shen.valvector (V1987 V1988) (<-address (<-address (value shen.*prologvectors*) V1988) (<-address V1987 1)))

(defun unify! (V1993 V1994 V1995 V1996) (shen.lzy=! (shen.lazyderef V1993 V1995) (shen.lazyderef V1994 V1995) V1995 V1996))

(defun shen.lzy=! (V2018 V2019 V2020 V2021) (cond ((= V2019 V2018) (thaw V2021)) ((and (shen.pvar? V2018) (not (shen.occurs? V2018 (shen.deref V2019 V2020)))) (bind V2018 V2019 V2020 V2021)) ((and (shen.pvar? V2019) (not (shen.occurs? V2019 (shen.deref V2018 V2020)))) (bind V2019 V2018 V2020 V2021)) ((and (cons? V2018) (cons? V2019)) (shen.lzy=! (shen.lazyderef (hd V2018) V2020) (shen.lazyderef (hd V2019) V2020) V2020 (freeze (shen.lzy=! (shen.lazyderef (tl V2018) V2020) (shen.lazyderef (tl V2019) V2020) V2020 V2021)))) (true false)))

(defun shen.occurs? (V2033 V2034) (cond ((= V2034 V2033) true) ((cons? V2034) (or (shen.occurs? V2033 (hd V2034)) (shen.occurs? V2033 (tl V2034)))) (true false)))

(defun identical (V2039 V2040 V2041 V2042) (shen.lzy== (shen.lazyderef V2039 V2041) (shen.lazyderef V2040 V2041) V2041 V2042))

(defun shen.lzy== (V2064 V2065 V2066 V2067) (cond ((= V2065 V2064) (thaw V2067)) ((and (cons? V2064) (cons? V2065)) (shen.lzy== (shen.lazyderef (hd V2064) V2066) (shen.lazyderef (hd V2065) V2066) V2066 (freeze (shen.lzy== (tl V2064) (tl V2065) V2066 V2067)))) (true false)))

(defun shen.pvar (V2069) (cn "Var" (shen.app (<-address V2069 1) "" shen.a)))

(defun bind (V2074 V2075 V2076 V2077) (do (shen.bindv V2074 V2075 V2076) (let Result (thaw V2077) (do (shen.unbindv V2074 V2076) Result))))

(defun fwhen (V2095 V2096 V2097) (cond ((= true V2095) (thaw V2097)) ((= false V2095) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V2095 "%" shen.s))))))

(defun call (V2113 V2114 V2115) (cond ((cons? V2113) (shen.call-help (function (shen.lazyderef (hd V2113) V2114)) (tl V2113) V2114 V2115)) (true false)))

(defun shen.call-help (V2120 V2121 V2122 V2123) (cond ((= () V2121) (V2120 V2122 V2123)) ((cons? V2121) (shen.call-help (V2120 (hd V2121)) (tl V2121) V2122 V2123)) (true (shen.f_error shen.call-help))))

(defun shen.intprolog (V2125) (cond ((and (cons? V2125) (cons? (hd V2125))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V2125)) (shen.insert-prolog-variables (cons (tl (hd V2125)) (cons (tl V2125) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))

(defun shen.intprolog-help (V2129 V2130 V2131) (cond ((and (cons? V2130) (and (cons? (tl V2130)) (= () (tl (tl V2130))))) (shen.intprolog-help-help V2129 (hd V2130) (hd (tl V2130)) V2131)) (true (shen.f_error shen.intprolog-help))))

(defun shen.intprolog-help-help (V2136 V2137 V2138 V2139) (cond ((= () V2137) (V2136 V2139 (freeze (shen.call-rest V2138 V2139)))) ((cons? V2137) (shen.intprolog-help-help (V2136 (hd V2137)) (tl V2137) V2138 V2139)) (true (shen.f_error shen.intprolog-help-help))))

(defun shen.call-rest (V2144 V2145) (cond ((= () V2144) true) ((and (cons? V2144) (and (cons? (hd V2144)) (cons? (tl (hd V2144))))) (shen.call-rest (cons (cons ((hd (hd V2144)) (hd (tl (hd V2144)))) (tl (tl (hd V2144)))) (tl V2144)) V2145)) ((and (cons? V2144) (and (cons? (hd V2144)) (= () (tl (hd V2144))))) ((hd (hd V2144)) V2145 (freeze (shen.call-rest (tl V2144) V2145)))) (true (shen.f_error shen.call-rest))))

(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))

(defun shen.insert-prolog-variables (V2148 V2149) (shen.insert-prolog-variables-help V2148 (shen.flatten V2148) V2149))

(defun shen.insert-prolog-variables-help (V2157 V2158 V2159) (cond ((= () V2158) V2157) ((and (cons? V2158) (variable? (hd V2158))) (let V (shen.newpv V2159) (let XV/Y (subst V (hd V2158) V2157) (let Z-Y (remove (hd V2158) (tl V2158)) (shen.insert-prolog-variables-help XV/Y Z-Y V2159))))) ((cons? V2158) (shen.insert-prolog-variables-help V2157 (tl V2158) V2159)) (true (shen.f_error shen.insert-prolog-variables-help))))

(defun shen.initialise-prolog (V2161) (let Vector (address-> (value shen.*prologvectors*) V2161 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V2161 1) V2161)))



