"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V4012 V4013) (trap-error (shen.prh V4012 V4013 0) (lambda E V4012)))

(defun shen.prh (V4017 V4018 V4019) (shen.prh V4017 V4018 (shen.write-char-and-inc V4017 V4018 V4019)))

(defun shen.write-char-and-inc (V4023 V4024 V4025) (do (write-byte (string->n (pos V4023 V4025)) V4024) (+ V4025 1)))

(defun print (V4027) (let String (shen.insert V4027 "~S") (let Print (shen.prhush String (stoutput)) V4027)))

(defun shen.prhush (V4030 V4031) (if (value *hush*) V4030 (pr V4030 V4031)))

(defun shen.mkstr (V4034 V4035) (cond ((string? V4034) (shen.mkstr-l (shen.proc-nl V4034) V4035)) (true (shen.mkstr-r (cons shen.proc-nl (cons V4034 ())) V4035))))

(defun shen.mkstr-l (V4038 V4039) (cond ((= () V4039) V4038) ((cons? V4039) (shen.mkstr-l (shen.insert-l (hd V4039) V4038) (tl V4039))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V4044 V4045) (cond ((= "" V4045) "") ((and (shen.+string? V4045) (and (= "~" (pos V4045 0)) (and (shen.+string? (tlstr V4045)) (= "A" (pos (tlstr V4045) 0))))) (cons shen.app (cons V4044 (cons (tlstr (tlstr V4045)) (cons shen.a ()))))) ((and (shen.+string? V4045) (and (= "~" (pos V4045 0)) (and (shen.+string? (tlstr V4045)) (= "R" (pos (tlstr V4045) 0))))) (cons shen.app (cons V4044 (cons (tlstr (tlstr V4045)) (cons shen.r ()))))) ((and (shen.+string? V4045) (and (= "~" (pos V4045 0)) (and (shen.+string? (tlstr V4045)) (= "S" (pos (tlstr V4045) 0))))) (cons shen.app (cons V4044 (cons (tlstr (tlstr V4045)) (cons shen.s ()))))) ((shen.+string? V4045) (shen.factor-cn (cons cn (cons (pos V4045 0) (cons (shen.insert-l V4044 (tlstr V4045)) ()))))) ((and (cons? V4045) (and (= cn (hd V4045)) (and (cons? (tl V4045)) (and (cons? (tl (tl V4045))) (= () (tl (tl (tl V4045)))))))) (cons cn (cons (hd (tl V4045)) (cons (shen.insert-l V4044 (hd (tl (tl V4045)))) ())))) ((and (cons? V4045) (and (= shen.app (hd V4045)) (and (cons? (tl V4045)) (and (cons? (tl (tl V4045))) (and (cons? (tl (tl (tl V4045)))) (= () (tl (tl (tl (tl V4045)))))))))) (cons shen.app (cons (hd (tl V4045)) (cons (shen.insert-l V4044 (hd (tl (tl V4045)))) (tl (tl (tl V4045))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V4047) (cond ((and (cons? V4047) (and (= cn (hd V4047)) (and (cons? (tl V4047)) (and (cons? (tl (tl V4047))) (and (cons? (hd (tl (tl V4047)))) (and (= cn (hd (hd (tl (tl V4047))))) (and (cons? (tl (hd (tl (tl V4047))))) (and (cons? (tl (tl (hd (tl (tl V4047)))))) (and (= () (tl (tl (tl (hd (tl (tl V4047))))))) (and (= () (tl (tl (tl V4047)))) (and (string? (hd (tl V4047))) (string? (hd (tl (hd (tl (tl V4047))))))))))))))))) (cons cn (cons (cn (hd (tl V4047)) (hd (tl (hd (tl (tl V4047)))))) (tl (tl (hd (tl (tl V4047)))))))) (true V4047)))

(defun shen.proc-nl (V4049) (cond ((= "" V4049) "") ((and (shen.+string? V4049) (and (= "~" (pos V4049 0)) (and (shen.+string? (tlstr V4049)) (= "%" (pos (tlstr V4049) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V4049))))) ((shen.+string? V4049) (cn (pos V4049 0) (shen.proc-nl (tlstr V4049)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V4052 V4053) (cond ((= () V4053) V4052) ((cons? V4053) (shen.mkstr-r (cons shen.insert (cons (hd V4053) (cons V4052 ()))) (tl V4053))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V4056 V4057) (shen.insert-h V4056 V4057 ""))

(defun shen.insert-h (V4063 V4064 V4065) (cond ((= "" V4064) V4065) ((and (shen.+string? V4064) (and (= "~" (pos V4064 0)) (and (shen.+string? (tlstr V4064)) (= "A" (pos (tlstr V4064) 0))))) (cn V4065 (shen.app V4063 (tlstr (tlstr V4064)) shen.a))) ((and (shen.+string? V4064) (and (= "~" (pos V4064 0)) (and (shen.+string? (tlstr V4064)) (= "R" (pos (tlstr V4064) 0))))) (cn V4065 (shen.app V4063 (tlstr (tlstr V4064)) shen.r))) ((and (shen.+string? V4064) (and (= "~" (pos V4064 0)) (and (shen.+string? (tlstr V4064)) (= "S" (pos (tlstr V4064) 0))))) (cn V4065 (shen.app V4063 (tlstr (tlstr V4064)) shen.s))) ((shen.+string? V4064) (shen.insert-h V4063 (tlstr V4064) (cn V4065 (pos V4064 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V4069 V4070 V4071) (cn (shen.arg->str V4069 V4071) V4070))

(defun shen.arg->str (V4079 V4080) (cond ((= V4079 (fail)) "...") ((shen.list? V4079) (shen.list->str V4079 V4080)) ((string? V4079) (shen.str->str V4079 V4080)) ((absvector? V4079) (shen.vector->str V4079 V4080)) (true (shen.atom->str V4079))))

(defun shen.list->str (V4083 V4084) (cond ((= shen.r V4084) (@s "(" (@s (shen.iter-list V4083 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V4083 V4084 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V4098 V4099 V4100) (cond ((= () V4098) "") ((= 0 V4100) "... etc") ((and (cons? V4098) (= () (tl V4098))) (shen.arg->str (hd V4098) V4099)) ((cons? V4098) (@s (shen.arg->str (hd V4098) V4099) (@s " " (shen.iter-list (tl V4098) V4099 (- V4100 1))))) (true (@s "|" (@s " " (shen.arg->str V4098 V4099))))))

(defun shen.str->str (V4107 V4108) (cond ((= shen.a V4108) V4107) (true (@s (n->string 34) (@s V4107 (n->string 34))))))

(defun shen.vector->str (V4111 V4112) (if (shen.print-vector? V4111) ((function (<-address V4111 0)) V4111) (if (vector? V4111) (@s "<" (@s (shen.iter-vector V4111 1 V4112 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V4111 0 V4112 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V4114) (let Zero (<-address V4114 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (= Zero shen.dictionary) true (if (not (number? Zero)) (shen.fbound? Zero) false))))))

(defun shen.fbound? (V4116) (trap-error (do (shen.lookup-func V4116) true) (lambda E false)))

(defun shen.tuple (V4118) (cn "(@p " (shen.app (<-address V4118 1) (cn " " (shen.app (<-address V4118 2) ")" shen.s)) shen.s)))

(defun shen.dictionary (V4120) "(dict ...)")

(defun shen.iter-vector (V4131 V4132 V4133 V4134) (cond ((= 0 V4134) "... etc") (true (let Item (<-address/or V4131 V4132 (freeze shen.out-of-bounds)) (let Next (<-address/or V4131 (+ V4132 1) (freeze shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V4133) (@s (shen.arg->str Item V4133) (@s " " (shen.iter-vector V4131 (+ V4132 1) V4133 (- V4134 1)))))))))))

(defun shen.atom->str (V4136) (trap-error (str V4136) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V4138) (or (empty? V4138) (cons? V4138)))



